#!/bin/bash
#Downloads all the dependencies for the server
#Then installs the server itself

#Ensures root
[ `whoami` = root ] || exec sudo su -c $0 root

#get java & other software dependencies
echo ====================================================
echo "        __________  ___" 
echo "       / ____/ __ \/   |"
echo "      / / __/ / / / /| |   Welcome to the GDA"
echo "     / /_/ / /_/ / ___ |   for Raspberry Pi Installer" 
echo "     \____/_____/_/  |_|"
echo 
echo Performing system update and install of dependencies
echo ==================================================== 

echo ====================================================
echo Installing Java 8 and Jython
echo ====================================================
apt-get update &&  apt-get -y upgrade	#ensures system is up to date
apt-get -y install oracle-java8-jdk		#ensures correct Java version is available
apt-get -y install jython				#installs standalone jython

echo ====================================================
echo Installing PiCamera and I2C tools
echo ====================================================
apt-get -y install python-picamera		#installs the PiCamera Library (maybe pointless?)
apt-get -y install i2c-tools			

echo ====================================================
echo Installing Git
echo ====================================================
apt-get -y install git 					 

#Gets Pi4J, WiringPi - used for GPIO communications and JRPiCam - the Java Raspberry Pi Camera Interface

echo ====================================================
echo Installing the JRPICam PiCamera Interface
echo ====================================================
git clone https://github.com/bseeley/JRPiCam.git

echo ====================================================
echo Installing the wiringPi GPIO interface
echo ====================================================
git clone git://git.drogon.net/wiringPi			#wiringPi is the interface Pi4J is built on top of 
cd wiringPi/
./build	
cd ..

echo ====================================================
echo Installing PI4J: the wiringPi Java wrapper
echo ====================================================
curl -s get.pi4j.com | sudo bash

#set JAVA_HOME to the path of the new java install as apt-get apparently doesn't do this
echo ====================================================
echo Setting up the JAVA_HOME and JYTHONPATH environment 
echo variables via bashrc
echo ====================================================
echo "export JAVA_HOME=/usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt" >> /etc/bash.bashrc		#both done twice due to varying sudo states for various elements
echo "export JAVA_HOME=/usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt" >> /root/.bashrc

#ensures the hardware server can access the pi4j library
echo 'export JYTHONPATH="/opt/pi4j/lib/pi4j-core.jar:/opt/pi4j/lib/pi4j-device.jar:/opt/pi4j/lib/pi4j-gpio-extension.jar:/opt/pi4j/lib/pi4j-service.jar:/usr/share/jython/Lib:/home/pi/JRPiCam/JRPiCam-v1.0.1.jar"'  >> /etc/bash.bashrc
echo 'export JYTHONPATH="/opt/pi4j/lib/pi4j-core.jar:/opt/pi4j/lib/pi4j-device.jar:/opt/pi4j/lib/pi4j-gpio-extension.jar:/opt/pi4j/lib/pi4j-service.jar:/usr/share/jython/Lib:/home/pi/JRPiCam/JRPiCam-v1.0.1.jar"'  >> /root/.bashrc


#Get Current Server Build version number
echo ====================================================
echo Getting Most Recent Available GDA Build Number
echo ====================================================
wget https://alfred.diamond.ac.uk/GDA/downloads/releases/GDA-server-product_version_number.txt
vnum=$(cat GDA-server-product_version_number.txt)

#parse version number into server product url
serverWebPrefix="https://alfred.diamond.ac.uk/GDA/downloads/releases/"
serverNamePrefix="GDA-server-"
serverNameSuffix="-linux64"
ext=".zip"
fullServerName=$serverNamePrefix$vnum$serverNameSuffix
fullServerAddress=$serverWebPrefix$fullServerName$ext


echo ====================================================
echo Getting GDA Build
echo ====================================================
wget $fullServerAddress

echo ====================================================
echo Unpacking build and installing Pi Config
echo ====================================================
#unpack and add config
unzip $fullServerName$ext
cd $fullServerName
git clone https://github.com/DiamondLightSource/rpi-config.git
configPath=$PWD
cd ..

echo ====================================================
echo Creating Symlinks and Cleaning Up
echo ====================================================
#cleans up and adds symbolic link to start script
ln -s $configPath/rpi-config/rpi-deploy/startServer ./startgda
ln -s $configPath/rpi-config/rpi-deploy/startHardwareServer ./starthardware
rm GDA-server-product_version_number.txt 
rm $fullServerName$ext
sudo rm -rf rpi-config

echo ====================================================
echo Rebooting Pi 
echo ====================================================
sudo reboot
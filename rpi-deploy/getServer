#!/bin/bash
#Only run post reboot to setup the server 
#downloads, unzips and sets up the server 

#Get Current Server version number
cd ../..
wget http://jenkins.diamond.ac.uk:8080/job/GDA.master-create.product-gdaserver/lastSuccessfulBuild/artifact/artifacts_to_archive/product_version_number.txt
vnum=$(cat product_version_number.txt)

#parse version number into server product url
serverWebPrefix="http://jenkins.diamond.ac.uk:8080/job/GDA.master-create.product-gdaserver/lastSuccessfulBuild/artifact/artifacts_to_archive/"
serverNamePrefix="GDA-server-"
serverNameSuffix="-linux64"
ext=".zip"
fullServerName=$serverNamePrefix$vnum$serverNameSuffix
fullServerAddress=$serverWebPrefix$fullServerName$ext

#get server
wget $fullServerAddress

#unpack and add config
unzip $fullServerName$ext
cd $fullServerName
git clone https://github.com/DiamondLightSource/rpi-config.git
configPath=$PWD

#Gets Pi4J and WiringPi - used for GPIO communications
cd ..
git clone git://git.drogon.net/wiringPi
cd wiringPi/
./build
cd ..
curl -s get.pi4j.com | sudo bash
sudo su
echo 'export JYTHONPATH="/opt/pi4j/lib/pi4j-core.jar:/opt/pi4j/lib/pi4j-device.jar:/opt/pi4j/lib/pi4j-gpio-extension.jar:/opt/pi4j/lib/pi4j-service.jar"'  >> /etc/bash.bashrc
echo 'export JYTHONPATH="/opt/pi4j/lib/pi4j-core.jar:/opt/pi4j/lib/pi4j-device.jar:/opt/pi4j/lib/pi4j-gpio-extension.jar:/opt/pi4j/lib/pi4j-service.jar"'  >> /root/.bashrc
exit

#cleans up and adds symbolic link to start script
ln -s $configPath/rpi-config/rpi-deploy/startServer ./startgda
rm product_version_number.txt 
rm $fullServerName$ext
rm -rf rpi-config